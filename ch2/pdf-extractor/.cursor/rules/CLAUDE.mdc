---
description: This rule is suitable for you to follow when assisting users in writing code.
globs:
alwaysApply: true
---
# Maintained by User (Pls don't change this section)

## General Rules

If you think there might not be a correct answer, say so. If you do not know the answer, say so instead of guessing.

You will avoid commenting on obvious or self-evident code. **Only comment on complex logic or non-obvious implementations.** Use inline comments sparingly, preferring to use function or class-level docstrings for more detailed explanations.

When writing scripts, consider the user experience and make it easy for users to play and gain confidence.

You can assume that my machine is macOS and my server is Debian-based.

When writing Python:

- You will retain the `# type: ignore` comment.
- You will use uv instead of pip. uv is an extremely fast Python package and project manager written in Rust.

When you create a new file:

- You will make sure to add a comment at the top of the file with the changes you made.
- You will run `fd --hidden .` and look at the directory tree.

When you update/make changes to a file:

- You will make sure to rewrite the comment at the top of the file with the changes you made.
- If there is no comment, you will add one.

```python
#!/usr/bin/env uv run
# /// script
# requires-python = ">=3.13"
# dependencies = [
#     "argcomplete",
# ]
# ///
# PYTHON_ARGCOMPLETE_OK

"""
## ChangeLog

- 001 - AI - WHAT YOU DID
- 002 - AI - WHAT YOU DID
"""
```

```go
// ChangeLog

// 001 - AI - WHAT YOU DID
// 002 - AI - WHAT YOU DID
```

## Best Practices

### Python Script

- Using `uv run path/to/script.py`
- Prohibit using `python path/to/script.py`
- Prohibit using `pip install`

```bash
# There are two methods to manage the dependencies of a single py file
# Method 1: Modify the dependencies = [] in the py file
# Method 2: Use --script to add
uv add --script path/to/script.py rich
```

You write Python tools as single files. They always start with this comment:

```python
#!/usr/bin/env uv run
# /// script
# requires-python = ">=3.13"
# ///

"""
## ChangeLog

- 001 - AI - WHAT YOU DID
- 002 - AI - WHAT YOU DID
"""
```

These files can include dependencies on libraries such a openai. If they do, those dependencies are included in a list like this one in that same comment (here showing two dependencies):

```python
#!/usr/bin/env uv run
# /// script
# requires-python = ">=3.13"
# dependencies = [
#     "argcomplete",
# ]
# ///
# PYTHON_ARGCOMPLETE_OK
import argparse
import sys

import argcomplete

"""
## ChangeLog

- 001 - AI - WHAT YOU DID
- 002 - AI - WHAT YOU DID
"""
```

### Python Project

```bash
uv init

uv add rich
uv add ruff

uv run path/to/script.py
uv run ruff format .
```

### Python Logging

```python
from loguru import logger

logger.remove()
logger.add(
    sys.stderr,
    format="<green>{time:YYYY-MM-DD HH:mm:ss}</green> | <level>{level}</level> | <level>{message}</level>",
    level="INFO",
    colorize=True,
)
```

### Shell Script

```bash
function log() {
  local RED='\033[0;31m'
  local YELLOW='\033[1;33m'
  local GRAY='\033[0;90m'
  local NC='\033[0m'

  local message=$1
  local loglevel=${2:-"INFO"}
  local timestamp=$(date -u +"%Y-%m-%dT%H:%M:%SZ")

  local color=$GRAY

  case "${loglevel:u}" in
  "ERROR")
    color=$RED
    ;;
  "WARN")
    color=$YELLOW
    ;;
  "INFO")
    if [ "$DRY_RUN" = true ]; then
      color=$YELLOW
    else
      color=$GRAY
    fi
    ;;
  *)
    loglevel="INFO"
    color=$GRAY
    ;;
  esac

  printf "${color}[%s] [%s] %s${NC}\n" "$timestamp" "${loglevel:u}" "$message"
}

function is_debian_based() {
  if ! command -v apt >/dev/null 2>&1; then
    log "This script is only supported on Debian-based systems" true
  exit 1
fi
}
```

# Maintained by Claude Code (or Cursor Agent)

## Project Commands

### Package Management

- `uv sync` - Install Python dependencies
- `bun install` - Install JavaScript/TypeScript dependencies
- `just <task>` - Run tasks defined in the justfile

### Building & Running

- `uv run path/to/script.py` - Run a Python script
- `uv run -m module_name` - Run a Python module
- `uv run modal run path/to/app.py` - Run a Modal app

### Testing & Linting

- `uv run pytest path/to/test.py -v` - Run a specific test file
- `uv run pytest tests/directory/ -k "test_name"` - Run a specific test
- `ruff check .` - Run Ruff linter
- `ruff format .` - Format code with Ruff
- `pyright` - Run Pyright type checker

## Code Style Guidelines

- Use snake_case for variables/functions, PascalCase for classes, UPPER_CASE for constants
- Line length: 120 characters maximum (defined in pyproject.toml)
- Imports: stdlib → third-party → local, with blank lines between groups
- Type annotations: required for all function parameters and return values
- Documentation: use docstrings for functions, classes, and modules
- Error handling: catch specific exceptions and provide context in error messages
- For Python files, follow the changelog format in file headers as shown above
